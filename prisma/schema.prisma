// ============================================================================
// AI COMPANION APP - FINAL PRISMA SCHEMA (CHAT MODE)
// ============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION (CLERK)
// ============================================================================

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  email       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Basic Profile (Required for MVP)
  name       String?
  age        Int?
  location   String?
  occupation String?

  // Psychology Profile (Optional, JSON structure)
  psychologyProfile Json? // UserPsychology interface

  // Onboarding Progress Tracking
  onboardingCompleted Boolean @default(false)
  currentStep         String  @default("basic") // basic, psychology, companion, relationship, avatar
  stepsCompleted      String[] @default([])

  // Relations
  companions    Companion[]
  conversations Conversation[]
  memories      SimplifiedMemory[]
  preferences   UserPreferences?
  relationshipDynamic RelationshipDynamic?

  @@index([clerkId])
  @@index([email])
  @@map("users")
}

// ============================================================================
// AI COMPANION (PARTNER) PROFILE
// ============================================================================

model Companion {
  id         String @id @default(cuid())
  userId     String
  name       String
  gender     String // 'male' | 'female' | 'non-binary'

  // Simplified Personality System (1-10 scales)
  affectionLevel Int @default(5) // 1-10: How openly affectionate
  empathyLevel Int @default(5) // 1-10: How empathetic and understanding  
  curiosityLevel Int @default(5) // 1-10: How curious and inquisitive
  playfulness Int @default(5) // 1-10: How playful and fun-loving
  
  // Style Preferences
  humorStyle String @default("gentle") // playful, witty, gentle, sarcastic, serious
  communicationStyle String @default("casual") // casual, formal, intimate, professional
  
  // Interaction Preferences
  userPreferredAddress String @default("you") // How to address the user
  partnerPronouns String @default("they/them") // he/him, she/her, they/them, other

  // Avatar (simplified)
  avatarUrl String? // Optional avatar image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations       Conversation[]
  memories           SimplifiedMemory[]
  relationshipDynamic RelationshipDynamic?

  @@index([userId])
  @@map("companions")
}

// ============================================================================
// RELATIONSHIP DYNAMICS & CONTEXT
// ============================================================================

model RelationshipDynamic {
  id          String            @id @default(cuid())
  userId      String            @unique
  companionId String            @unique

  // Relationship Status
  status RelationshipStatus

  // Conditional Context (based on status)
  relationshipHistory Json? // RelationshipHistory or EarlyRelationship interface

  // Content Boundaries
  contentBoundaries Json? // User-defined content limits

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@map("relationship_dynamics")
}

// ============================================================================
// CONVERSATION MANAGEMENT
// ============================================================================

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  companionId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Conversation Metadata
  title        String?  // Auto-generated or user-defined
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())

  // Message Statistics
  messageCount    Int @default(0)
  userMessages    Int @default(0)
  aiMessages      Int @default(0)
  deletedMessages Int @default(0)
  editedMessages  Int @default(0)

  // Conversation Branches (for message editing)
  branches Json? // Track conversation branch structure

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  messages  Message[]
  sessions  ConversationSession[]

  @@index([userId])
  @@index([companionId])
  @@index([lastActivity])
  @@map("conversations")
}

// ============================================================================
// MESSAGE SYSTEM (WITH REPLY, EDIT, DELETE FEATURES)
// ============================================================================

model Message {
  id             String   @id @default(cuid())
  conversationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // === MESSAGE CONTENT ===
  content String @db.Text // Use TEXT for longer messages
  role    MessageRole

  // Reply System
  replyToId   String?
  hasReplies  Boolean @default(false)
  replyDepth  Int     @default(0) // For nested reply threading

  // Edit & Branching System
  isEdited     Boolean @default(false)
  editCount    Int     @default(0)
  editHistory  Json?   // Array of {content, editedAt, branchId}
  branchId     String? @default("main") // Conversation branch identifier
  originalContent String? @db.Text // Store original content

  // Delete System (independent of memories)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   DeletedBy? // USER or SYSTEM
  deleteReason String?   // Reason for deletion

  // Memory Association Tracking (for debugging, not functionality)
  memoryGenerated Boolean @default(false) // Whether this message generated memories
  memoryCount     Int     @default(0)     // How many memories generated

  // Message Metadata
  wordCount      Int?     // For analytics
  characterCount Int?     // For analytics
  sentiment      String?  // positive, negative, neutral
  isImportant    Boolean  @default(false) // User can mark important

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo      Message?     @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]    @relation("MessageReplies")

  // Indexes for Performance
  @@index([conversationId, createdAt])
  @@index([conversationId, branchId])
  @@index([conversationId, isDeleted])
  @@index([replyToId])
  @@map("messages")
}

// ============================================================================
// SIMPLIFIED MEMORY SYSTEM (DATABASE ONLY)
// ============================================================================

model SimplifiedMemory {
  id        String   @id @default(cuid())
  userId    String   // Owner of memory
  companionId String // Which companion this memory relates to
  content   String @db.Text // The actual memory content
  
  // User-defined organization
  tags       String[]   @default([]) // User-defined tags for easy retrieval
  importance Int        @default(5)  // 1-10 importance scale
  
  // Context
  emotionalContext String? // Emotional state when memory formed
  
  // Timestamps
  createdAt    DateTime @default(now())
  lastAccessed DateTime? // When last used in response
  
  // Control
  userCreated  Boolean @default(false) // AI vs user created
  isVisible    Boolean @default(true)  // User can see this memory

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  // Indexes for Performance
  @@index([userId, companionId])
  @@index([userId, importance])
  @@index([userId, createdAt])
  @@index([tags])
  @@map("simplified_memories")
}

// ============================================================================
// ANALYTICS & SESSION TRACKING
// ============================================================================

model ConversationSession {
  id             String @id @default(cuid())
  conversationId String
  userId         String
  startedAt      DateTime @default(now())
  endedAt        DateTime?

  // Session Metrics
  messageCount  Int @default(0)
  userMessages  Int @default(0)
  aiMessages    Int @default(0)
  duration      Int? // in seconds

  // Memory Activity
  memoriesCreated  Int @default(0) // New memories from this session
  memoriesAccessed Int @default(0) // Memories retrieved for context
  memoryQuality    Float? // Quality score of generated memories

  // User Engagement
  messagesEdited  Int @default(0)
  messagesDeleted Int @default(0)
  repliesUsed     Int @default(0)
  branchesCreated Int @default(0)

  // Session Quality
  userSatisfaction Int?    // 1-5 rating if collected
  sessionRating    String? // "good", "great", "poor"
  feedbackNotes    String? // User feedback

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId, startedAt])
  @@index([conversationId])
  @@map("conversation_sessions")
}

// ============================================================================
// USER PREFERENCES & SETTINGS
// ============================================================================

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique

  // Chat Preferences
  enableTypingIndicators Boolean @default(true)
  enableNotifications    Boolean @default(true)
  chatTheme             String  @default("default") // light, dark, auto
  messageTimestamps      Boolean @default(true)
  soundEffects          Boolean @default(false)

  // Memory Preferences
  memoryRetentionDays       Int     @default(365)    // Days to keep memories
  memoryImportanceThreshold Int     @default(3)      // Minimum importance to store
  autoMemoryDeletion        Boolean @default(false)  // Auto-delete old memories
  memoryPrivacyLevel        String  @default("balanced") // strict, balanced, open

  // AI Behavior Settings
  responseStyle     String @default("adaptive") // adaptive, consistent, varied
  responseLength    String @default("medium")   // short, medium, long, adaptive
  creativityLevel   Float  @default(0.7)        // 0.0 to 1.0
  emotionalDepth    Float  @default(0.8)        // How emotionally expressive
  memoryReference   String @default("natural")  // natural, frequent, minimal

  // Privacy & Safety
  dataRetentionDays   Int     @default(365)  // How long to keep data
  allowDataExport     Boolean @default(true)
  allowAnalytics      Boolean @default(true)
  contentFiltering    String  @default("moderate") // strict, moderate, minimal

  // Notification Preferences
  emailNotifications    Boolean @default(false)
  pushNotifications     Boolean @default(true)
  reminderNotifications Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}


// ============================================================================
// ENUMS
// ============================================================================

enum MessageRole {
  USER
  ASSISTANT
}

// Removed MemoryType enum - using simplified tags instead

enum RelationshipStatus {
  JUST_MET
  EARLY_DATING
  COMMITTED
  LIVING_TOGETHER
  MARRIED
}

enum DeletedBy {
  USER
  SYSTEM
}
